package lesson5.genomicrangequery;

import junit.framework.TestCase;
import org.junit.Test;

public class GenomicRangeQueryTestSuite extends TestCase {
    @Test
    public void test1 () {
        //Given
        String s = "CAGCCTA";
        int[] p = new int[]{2,5,0};
        int[] q = new int[]{4,5,6};
        GenomicRangeQuery genomicRangeQuery = new GenomicRangeQuery();
        //When
        int[] result = genomicRangeQuery.solution(s,p,q);
        System.out.println(result[0] + " " + result[1] + " " + result[2]);
        //Then
        assertEquals(2, result[0]);
        assertEquals(4, result[1]);
        assertEquals(1, result[2]);
    }

    @Test
    public void test2 () {
        //Given
        String s = "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT" +
                "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT" +
                "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT" +
                "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT" +
                "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT" +
                "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT" +
                "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT" +
                "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT" +
                "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT" +
                "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT" +
                "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT" +
                "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT" +
                "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT" +
                "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT" +
                "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT" +
                "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT" +
                "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT" +
                "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT" +
                "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT" +
                "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT" +
                "TTTTTTTTTTT";
        int[] p = new int[]{2,5,2,0,444,666};
        int[] q = new int[]{4,999,2000, 2222,2223};
        GenomicRangeQuery genomicRangeQuery = new GenomicRangeQuery();
        //When
        int[] result = genomicRangeQuery.solution(s,p,q);
        System.out.println(result[0] + " " + result[1] + " " + result[2]);
        //Then
        assertEquals(4, result[0]);
        assertEquals(4, result[1]);
        assertEquals(4, result[2]);
    }

    @Test
    public void test3 () {
        //Given
        String s = "ACCCCACCCACACAACCCCAAAAACCCCACAACCCCACCCCAACCCCAACACCCCCCCAAAAAACACCCCACACAACACACAACCCACCACCAAAAAAAC" +
                "CCCCCCCACACCCCCAAAAACAACAACCCAACCCACAAACCAACAAAAAACCACAAAACCCCACAAAAAAAAAACAACCCAAAACAACAACCCAAAAACCACA" +
                "CACCACAACACCCCAAAACCCCACACCCCCCCAACCAACACCCCACAAAACCAACAAACAACACACCCAAAAACCACAAACCACCCAAACAAACACCACCAAA" +
                "ACCCCCCACCCCCAAAACCAAACCCAACCCACCCACACAAACCCAACCCAACCCCAAACCAAACACCACCCCACCCACCCAAAAACAAAAACCCAAACCCACA" +
                "ACAACCACCAACCCCAACCCAAAAACACCCACAAAAACAACCACACCACCCAACCAAAAACCCAAACACACACCCACACCAACCCACCCCAACCCACCCACAC" +
                "CAAACAAACCCACCCAAAACCACAAAAACAAAACACCAAACCACCCCAAACAACAAAAAACCAAAAACAACCAACCACAACAACCAAACAAACACACACCACC" +
                "CACAAAAAACCAACACAACAACCCCCAACCAACACCAACCCACCCACCCACCCAAACACCACACCCAACACAAAACAAACAAAACACAACACCACACCACCCA" +
                "CCCCACCCACACAAAAACAACCCACCACAACAACAACAACCCCACACCCCCCCAAAAAACAACCCACCCACCAACCCCCCCACACCCCAAACAACAAACAAAC" +
                "ACCCCAACCCCCAACCCACCACCCACCCCACAAACAAAACAACCCCCCAACACCCCAACACCACCAACCAACCAAACACCCACCACAAACACAAACAAACAAA" +
                "AAACCACCACACCACAAACCCAACACCCAACCAAACAACCACCAAAAACAACCACCCACCAAAACACAAAAACCCACAAAACAAAACACCCCCCCACCAACCA" +
                "ACCCCACACCAACACACCCCAAAACAACCACCAACACCAACCACAAACAAACCACAACCAAAAAAAAAAACCACAAAACCCACCCAAAACACCCAAACCAAAC" +
                "ACACAACCCACACAAACCCCCCAACCCCAAACACCACCACCCCCCAAACCACAACCCCAACCCCCAAACCCAAACCCAACAAACACCCCCCACAAAAACCAAA" +
                "CCCACCACACAAACCCAAAAAAAACACACACACAAAACCCAAACCCCCCAACAACAACCCACCACCACAAAACCACCCCACCAACAACAACCCCACCACCACA" +
                "CCACCACACCACAACCCCAAAAAACCAAACAACCCAACCCAAACCAACCAAACACACCAACCCAAAACAAACAAAACCACAAAAACCCACACCAACCAAAAAA" +
                "CAAACCCACACACAAACCCCCCCAACACAAAAAAAACCCACCCCCAACCCCCAACCCCCCAACCACCCCACCAACCACAAACACAAACAAAACACCAAACAAC" +
                "CCACACCAACCCACCAAACAAAACCACACCAAACACACCACACCACCAACAAAACCAACCACCCCACCCAAACAACCACAACACCCCCACAAACCCACCCAAA" +
                "ACACACACAACACCCAAACCCCAAACAAAACACCCACCAAACAAACCAACACAACAAAAAAACAACCCAAACAACCAAAACCAAAACCAACACAAACAAAACC" +
                "CCCACCCCCCACACCACACCCAAAACCAACCAAACAAAACAAAAACCACCCCCCCCCCCAAAAAACCACCCCCACCACCCAACACCACCCAACACACCCCCAA" +
                "CAACACAACACAACCACAAACACCCACAAAAACACAAAAACACCCCCCCCCCACAACCAACCAACAACCAACACACACAAACCAAACCACCCACACACAACCC" +
                "ACACACCCAACAAAAACAACAACACCCACAACCACCACAAAACACCACCCACCAACAAACAACACCCCCAACCCCACAAAAAAACCCACACACC";
        int[] p = new int[]{0,0,0};
        int[] q = new int[]{500,800,2000};
        GenomicRangeQuery genomicRangeQuery = new GenomicRangeQuery();
        //When
        int[] result = genomicRangeQuery.solution(s,p,q);
        System.out.println(result[0] + " " + result[1] + " " + result[2]);
        //Then
        assertEquals(1, result[0]);
        assertEquals(1, result[1]);
        assertEquals(1, result[2]);
    }



}
